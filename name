import { ApiUserStoryNotes } from './api-user-story-notes';

describe('ApiUserStoryNotes', () => {
  let apiUserStoryNotes: ApiUserStoryNotes;

  beforeEach(() => {
    apiUserStoryNotes = new ApiUserStoryNotes();
  });

  it('should create an instance', () => {
    expect(apiUserStoryNotes).toBeTruthy();
  });

  it('should have default values set', () => {
    expect(apiUserStoryNotes.userStoryDescription).toBeUndefined();
    expect(apiUserStoryNotes.specialRules).toBeUndefined();
    expect(apiUserStoryNotes.testingRequirements).toBeUndefined();
    expect(apiUserStoryNotes.acceptanceCriteria).toBeUndefined();
  });

  it('should set and get userStoryDescription correctly', () => {
    const mockUserStoryDescription = 'Sample User Story Description';

    apiUserStoryNotes.userStoryDescription = mockUserStoryDescription;

    expect(apiUserStoryNotes.userStoryDescription).toEqual(mockUserStoryDescription);
  });

  it('should set and get specialRules correctly', () => {
    const mockSpecialRules = 'Sample Special Rules';

    apiUserStoryNotes.specialRules = mockSpecialRules;

    expect(apiUserStoryNotes.specialRules).toEqual(mockSpecialRules);
  });

  it('should set and get testingRequirements correctly', () => {
    const mockTestingRequirements = 'Sample Testing Requirements';

    apiUserStoryNotes.testingRequirements = mockTestingRequirements;

    expect(apiUserStoryNotes.testingRequirements).toEqual(mockTestingRequirements);
  });

  it('should set and get acceptanceCriteria correctly', () => {
    const mockAcceptanceCriteria = 'Sample Acceptance Criteria';

    apiUserStoryNotes.acceptanceCriteria = mockAcceptanceCriteria;

    expect(apiUserStoryNotes.acceptanceCriteria).toEqual(mockAcceptanceCriteria);
  });

  // Add more test cases as needed
});
