<sdf-action-menu emphasis="secondary" [label]="'Actions'" *ngIf="actionItems.length">

    <sdf-menu>
        <sdf-menu-item [title]="item.label" *ngFor="let item of actionItems" (click)="onActionChanged(item)">
            {{item.label}}</sdf-menu-item>
    </sdf-menu>

</sdf-action-menu>

<sdf-focus-pane [visible]="createStoryPopUp" [heading]="'Create a new section'" closeable="true"
    (sdfDismiss)="createNewStoryPopUpClose()" (sdfAccept)="createNewStory()" [disableAcceptButton]="disableAcceptButton"
    [acceptLabel]="'Create'">
    <div class=" px-4 flex flex-col gap-y-6">
        <span>Please add the required details to create a new section</span>
        <div class="flex flex-col gap-y-2">

            <sdf-input tabindex="0" class="min-w-28 w-full max-w-xs" state='normal' label="Section Title"
                [requiredState]="'required'" minlength="3" maxlength="35" (sdfInput)="newStoryDetails($event, 'name')"
                [value]="storyDetails.$name"></sdf-input>
            <span *ngIf="!isNameExists" class="text-sm">Min 3 characters</span>
            <span *ngIf="isNameExists" class="text-sm text-action-destructive">Given section name already exists</span>

        </div>

        <div class="flex flex-col gap-y-2">
            <sdf-textarea label="Description" resize="none" [requiredState]="'required'" [rows]="4" maxlength="2000"
                (sdfInput)="newStoryDetails($event, 'description')" [value]="storyDetails.$description"></sdf-textarea>
            <span *ngIf="isDescExists" class="text-sm">Max 2000 characters</span>
            <span *ngIf="!isDescExists" class="text-sm">{{helpText}}</span>
        </div>

    </div>

    <div class="h-full w-full flex items-center justify-center fixed top-0 left-0" *ngIf="createStoryLoader">
        <sdf-busy-indicator size="xl"></sdf-busy-indicator>
    </div>

</sdf-focus-pane>

import { Component, EventEmitter, OnInit, Output } from "@angular/core";
import { ActivatedRoute } from "@angular/router";
import { ApiUserStoryDetails } from "project/modules/process/model/api/api-user-story-details-dto";
import { ActionDetails } from "project/modules/process/model/common/action-details-dto";
import { UINewStoryPayloadDto } from "project/modules/process/model/ui/ui-new-story-payload-dto";
import { ProcessPipelineService } from "project/modules/process/service/pipeline/process-pipeline.service";
import { ProcessConstants } from "project/modules/process/service/util/process.constants";
import { ErrorMap } from "project/shared/services/util/error-map.util";

@Component({
    selector: 'app-process-actions',
    templateUrl: './process-actions.component.html'
})
export class ProcessActionsComponent implements OnInit {

    public actionItems: ActionDetails[] = [];
    public createStoryPopUp: boolean = false;
    public createStoryLoader: boolean = false;
    public storyDetails: UINewStoryPayloadDto;
    public helpText: string;
    public disableAcceptButton: boolean = true;
    public isNameExists: boolean = false;
    public isDescExists: boolean = true;
    @Output() isCompleted: EventEmitter<boolean> = new EventEmitter();

    constructor(public processPipeline: ProcessPipelineService, public activatedRoute: ActivatedRoute) { }
    ngOnInit(): void {
        this.isNameExists = false;
        this.isDescExists=true;
        this.actionItems.push(ProcessConstants.createAction);
        this.storyDetails = new UINewStoryPayloadDto();
    }

    public onActionChanged(item: ActionDetails): void {
        if(ProcessConstants.createAction.value === item.value){
            this.createStoryPopUp = true;
        }
    }

    public createNewStoryPopUpClose(): void {
        this.resetValues();
        this.isCompleted.emit(true);
    }
    private resetValues(): void {
        this.createStoryPopUp = false;
        this.storyDetails = new UINewStoryPayloadDto();
        this.helpText = '';
        this.isNameExists = false;
        this.disableAcceptButton = true;
        this.isDescExists=true;
    }

    public createNewStory(): void {
        this.createStoryLoader = true;
        this.storyDetails.$featureUUID = this.activatedRoute.snapshot.params['featureuuid'];
        this.storyDetails.$clientId = this.activatedRoute.snapshot.params['clientId'];
        this.processPipeline.createStory(this.storyDetails).subscribe((result: ApiUserStoryDetails | ErrorMap) => {
            this.createStoryLoader = false;
            if (result instanceof ErrorMap) {
                if (result.error.error.errorCode === ProcessConstants.ErrorCode) {
                    this.isNameExists = true;
                }
                else
                    this.createNewStoryPopUpClose();
            }
            else
                this.createNewStoryPopUpClose();
        });

    }


    public newStoryDetails(event: any, detail: string): void {
        switch (detail) {
            case 'name':
                this.storyDetails.$name = event.detail.trim();
                break;
            case 'description':
                this.isDescExists=false;
                this.storyDetails.$description = event.detail.trim();
                this.charactersRemaining();
                break;
        }
        this.disableAcceptButton = this.nameValidation();
    }

    public charactersRemaining(): void {
        let noOfCharactersRemaining: number = ProcessConstants.charactersLimit - this.storyDetails.$description.length;
        this.helpText = ProcessConstants.helpText + noOfCharactersRemaining + ProcessConstants.charactersRemaining;
        if (noOfCharactersRemaining === 0) {
            this.helpText = ProcessConstants.helpText + ProcessConstants.reachedLimt;
        }
    }

    public nameValidation(): boolean {
        return !(this.storyDetails.$name.length >= 3 && this.storyDetails.$description.length >= 1);
    }
}
